// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: plane.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyPlaneClient is the client API for MyPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyPlaneClient interface {
	CreatePlane(ctx context.Context, in *Plane, opts ...grpc.CallOption) (*Plane, error)
	UpdatePlane(ctx context.Context, in *Plane, opts ...grpc.CallOption) (*Plane, error)
	PlaneDetails(ctx context.Context, in *FindPlaneRequest, opts ...grpc.CallOption) (*Plane, error)
}

type myPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewMyPlaneClient(cc grpc.ClientConnInterface) MyPlaneClient {
	return &myPlaneClient{cc}
}

func (c *myPlaneClient) CreatePlane(ctx context.Context, in *Plane, opts ...grpc.CallOption) (*Plane, error) {
	out := new(Plane)
	err := c.cc.Invoke(ctx, "/proto.MyPlane/CreatePlane", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myPlaneClient) UpdatePlane(ctx context.Context, in *Plane, opts ...grpc.CallOption) (*Plane, error) {
	out := new(Plane)
	err := c.cc.Invoke(ctx, "/proto.MyPlane/UpdatePlane", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myPlaneClient) PlaneDetails(ctx context.Context, in *FindPlaneRequest, opts ...grpc.CallOption) (*Plane, error) {
	out := new(Plane)
	err := c.cc.Invoke(ctx, "/proto.MyPlane/PlaneDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyPlaneServer is the server API for MyPlane service.
// All implementations must embed UnimplementedMyPlaneServer
// for forward compatibility
type MyPlaneServer interface {
	CreatePlane(context.Context, *Plane) (*Plane, error)
	UpdatePlane(context.Context, *Plane) (*Plane, error)
	PlaneDetails(context.Context, *FindPlaneRequest) (*Plane, error)
	mustEmbedUnimplementedMyPlaneServer()
}

// UnimplementedMyPlaneServer must be embedded to have forward compatible implementations.
type UnimplementedMyPlaneServer struct {
}

func (UnimplementedMyPlaneServer) CreatePlane(context.Context, *Plane) (*Plane, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlane not implemented")
}
func (UnimplementedMyPlaneServer) UpdatePlane(context.Context, *Plane) (*Plane, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlane not implemented")
}
func (UnimplementedMyPlaneServer) PlaneDetails(context.Context, *FindPlaneRequest) (*Plane, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaneDetails not implemented")
}
func (UnimplementedMyPlaneServer) mustEmbedUnimplementedMyPlaneServer() {}

// UnsafeMyPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyPlaneServer will
// result in compilation errors.
type UnsafeMyPlaneServer interface {
	mustEmbedUnimplementedMyPlaneServer()
}

func RegisterMyPlaneServer(s grpc.ServiceRegistrar, srv MyPlaneServer) {
	s.RegisterService(&MyPlane_ServiceDesc, srv)
}

func _MyPlane_CreatePlane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plane)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyPlaneServer).CreatePlane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MyPlane/CreatePlane",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyPlaneServer).CreatePlane(ctx, req.(*Plane))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyPlane_UpdatePlane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plane)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyPlaneServer).UpdatePlane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MyPlane/UpdatePlane",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyPlaneServer).UpdatePlane(ctx, req.(*Plane))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyPlane_PlaneDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPlaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyPlaneServer).PlaneDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MyPlane/PlaneDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyPlaneServer).PlaneDetails(ctx, req.(*FindPlaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyPlane_ServiceDesc is the grpc.ServiceDesc for MyPlane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyPlane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MyPlane",
	HandlerType: (*MyPlaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlane",
			Handler:    _MyPlane_CreatePlane_Handler,
		},
		{
			MethodName: "UpdatePlane",
			Handler:    _MyPlane_UpdatePlane_Handler,
		},
		{
			MethodName: "PlaneDetails",
			Handler:    _MyPlane_PlaneDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plane.proto",
}
