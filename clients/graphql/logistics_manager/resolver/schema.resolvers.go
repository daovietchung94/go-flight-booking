package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"go-training/clients/graphql/logistics_manager/generated"
	"go-training/clients/graphql/logistics_manager/model"
	"go-training/pb"
)

// CreatePlane is the resolver for the createPlane field.
func (r *mutationResolver) CreatePlane(ctx context.Context, input model.CreatePlaneRequest) (*model.Plane, error) {
	pReq := &pb.CreatePlaneRequest{
		Number:     input.Number,
		NumOfSeats: int32(input.NumOfSeats),
		Status:     string(input.Status),
	}

	pRes, err := r.MyPlaneClient.CreatePlane(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Plane{
		ID:         pRes.Id,
		Number:     pRes.Number,
		NumOfSeats: int(pRes.NumOfSeats),
		Status:     model.PlaneStatus(pRes.Status),
	}

	return dto, nil
}

// UpdatePlane is the resolver for the updatePlane field.
func (r *mutationResolver) UpdatePlane(ctx context.Context, input model.UpdatePlaneRequest) (*model.Plane, error) {
	pReq := &pb.UpdatePlaneRequest{
		Id:         input.ID,
		Number:     input.Number,
		NumOfSeats: int32(input.NumOfSeats),
		Status:     string(input.Status),
	}

	pRes, err := r.MyPlaneClient.UpdatePlane(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Plane{
		ID:         pRes.Id,
		Number:     pRes.Number,
		NumOfSeats: int(pRes.NumOfSeats),
		Status:     model.PlaneStatus(pRes.Status),
	}

	return dto, nil
}

// UpdatePlaneStatus is the resolver for the updatePlaneStatus field.
func (r *mutationResolver) UpdatePlaneStatus(ctx context.Context, input model.UpdatePlaneStatusRequest) (*model.Plane, error) {
	pReq := &pb.UpdatePlaneStatusRequest{
		Id:     input.ID,
		Status: input.Status.String(),
	}

	pRes, err := r.MyPlaneClient.UpdatePlaneStatus(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Plane{
		ID:         pRes.Id,
		Number:     pRes.Number,
		NumOfSeats: int(pRes.NumOfSeats),
		Status:     model.PlaneStatus(pRes.Status),
	}

	return dto, nil
}

// DeletePlane is the resolver for the deletePlane field.
func (r *mutationResolver) DeletePlane(ctx context.Context, input model.DeletePlaneRequest) (*model.DeletePlaneResponse, error) {
	pReq := &pb.DeletePlaneRequest{Id: input.ID}

	pRes, err := r.MyPlaneClient.DeletePlane(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	return &model.DeletePlaneResponse{IsDeleted: pRes.IsDeleted}, nil
}

// GetPlanes is the resolver for the getPlanes field.
func (r *queryResolver) GetPlanes(ctx context.Context, input model.GetPlanesRequest) (*model.GetPlanesResponse, error) {
	pReq := &pb.GetPlanesRequest{
		Page:  int32(input.Page),
		Limit: int32(input.Limit),
		Sort:  input.Sort,
	}

	pRes, err := r.MyPlaneClient.GetPlanes(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	planes := make([]*model.Plane, len(pRes.Rows))
	for i, v := range pRes.Rows {
		planes[i] = &model.Plane{
			ID:         v.Id,
			Number:     v.Number,
			NumOfSeats: int(v.NumOfSeats),
			Status:     model.PlaneStatus(v.Status),
		}
	}

	dto := &model.GetPlanesResponse{
		Page:       int(pRes.GetPage()),
		Limit:      int(pRes.GetLimit()),
		Sort:       pRes.GetSort(),
		TotalRows:  int(pRes.GetTotalRows()),
		TotalPages: int(pRes.GetTotalPages()),
		Rows:       planes,
	}

	return dto, nil
}

// GetPlaneDetails is the resolver for the getPlaneDetails field.
func (r *queryResolver) GetPlaneDetails(ctx context.Context, input model.GetPlaneDetailsRequest) (*model.Plane, error) {
	pReq := &pb.GetPlaneDetailsRequest{
		Id: input.ID,
	}

	pRes, err := r.MyPlaneClient.GetPlaneDetails(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Plane{
		ID:         pRes.Id,
		Number:     pRes.Number,
		NumOfSeats: int(pRes.NumOfSeats),
		Status:     model.PlaneStatus(pRes.Status),
	}

	return dto, nil
}

// GetPlaneStatus is the resolver for the getPlaneStatus field.
func (r *queryResolver) GetPlaneStatus(ctx context.Context, input model.GetPlaneStatusRequest) (*model.Plane, error) {
	pReq := &pb.GetPlaneStatusRequest{
		Id: input.ID,
	}

	pRes, err := r.MyPlaneClient.GetPlaneStatus(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Plane{
		ID:         pRes.Id,
		Number:     pRes.Number,
		NumOfSeats: int(pRes.NumOfSeats),
		Status:     model.PlaneStatus(pRes.Status),
	}

	return dto, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
