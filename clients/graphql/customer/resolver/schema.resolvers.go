package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"go-training/clients/graphql/customer/generated"
	"go-training/clients/graphql/customer/model"
	"go-training/pb"
	"go-training/pkg/utils"
	"time"
)

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input model.CreateCustomerRequest) (*model.Customer, error) {
	pReq := &pb.CreateCustomerRequest{
		Name: input.Name,
		DateOfBirth: &pb.Date{
			Year:  int32(input.DateOfBirth.Year()),
			Month: int32(input.DateOfBirth.Month()),
			Day:   int32(input.DateOfBirth.Day()),
		},
		Address:  input.Address,
		Email:    input.Email,
		Password: input.Password,
	}

	pRes, err := r.MyCustomerClient.CreateCustomer(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Customer{
		ID:          pRes.Id,
		Name:        pRes.Name,
		DateOfBirth: time.Date(int(pRes.DateOfBirth.Year), time.Month(pRes.DateOfBirth.Month), int(pRes.DateOfBirth.Day), 0, 0, 0, 0, time.UTC),
		Address:     pRes.Address,
		Email:       pRes.Email,
	}

	return dto, nil
}

// MakeReservation is the resolver for the makeReservation field.
func (r *mutationResolver) MakeReservation(ctx context.Context, input model.MakeReservationRequest) (*model.Reservation, error) {
	pReq := &pb.CreateReservationRequest{
		CustomerId: input.CustomerID,
		FlightId:   input.FlightID,
	}

	pRes, err := r.MyBookingClient.CreateReservation(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Reservation{
		ID: pRes.Id,
		Customer: &model.Customer{
			ID:          pRes.Customer.Id,
			Name:        pRes.Customer.Name,
			DateOfBirth: time.Date(int(pRes.Customer.DateOfBirth.Year), time.Month(pRes.Customer.DateOfBirth.Month), int(pRes.Customer.DateOfBirth.Day), 0, 0, 0, 0, time.UTC),
			Address:     pRes.Customer.Address,
			Email:       pRes.Customer.Email,
		},
		Flight: &model.Flight{
			ID:             pRes.Flight.Id,
			PlaneNumber:    pRes.Flight.PlaneNumber,
			AvailableSeats: int(pRes.Flight.AvailableSeats),
			FromCity:       pRes.Flight.FromCity,
			ToCity:         pRes.Flight.ToCity,
			DepTime:        utils.ToTime(pRes.Flight.DepTime),
			ArrTime:        utils.ToTime(pRes.Flight.ArrTime),
			Status:         pRes.Flight.Status,
		},
		ReservationDate: utils.ToTime(pRes.ReservationDate),
		Status:          pRes.Status,
	}

	return dto, nil
}

// GetCustomerDetails is the resolver for the getCustomerDetails field.
func (r *queryResolver) GetCustomerDetails(ctx context.Context, input model.GetCustomerDetailsRequest) (*model.Customer, error) {
	pReq := &pb.GetCustomerDetailsRequest{
		Id: input.ID,
	}
	pRes, err := r.MyCustomerClient.GetCustomerDetails(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Customer{
		ID:          pRes.Id,
		Name:        pRes.Name,
		Address:     pRes.Address,
		DateOfBirth: time.Date(int(pRes.DateOfBirth.Year), time.Month(pRes.DateOfBirth.Month), int(pRes.DateOfBirth.Day), 0, 0, 0, 0, time.UTC),
	}

	return dto, nil
}

// GetReservationDetails is the resolver for the getReservationDetails field.
func (r *queryResolver) GetReservationDetails(ctx context.Context, input model.GetReservationDetailsRequest) (*model.Reservation, error) {
	pReq := &pb.GetReservationDetailsRequest{
		Id: input.ID,
	}
	pRes, err := r.MyBookingClient.GetReservationDetails(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	cReq := &pb.GetCustomerDetailsRequest{
		Id: pRes.Customer.Id,
	}
	cRes, err := r.MyCustomerClient.GetCustomerDetails(ctx, cReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	fReq := &pb.GetFlightDetailsRequest{
		Id: pRes.Flight.Id,
	}
	fRes, err := r.MyFlightClient.GetFlightDetails(ctx, fReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Reservation{
		ID: pRes.Id,
		Customer: &model.Customer{
			ID:          cRes.Id,
			Name:        cRes.Name,
			DateOfBirth: time.Date(int(cRes.DateOfBirth.Year), time.Month(cRes.DateOfBirth.Month), int(cRes.DateOfBirth.Day), 0, 0, 0, 0, time.UTC),
			Address:     cRes.Address,
			Email:       cRes.Email,
		},
		Flight: &model.Flight{
			ID:             fRes.Id,
			PlaneNumber:    fRes.PlaneNumber,
			AvailableSeats: int(fRes.AvailableSeats),
			FromCity:       fRes.FromCity,
			ToCity:         fRes.ToCity,
			DepTime:        utils.ToTime(fRes.DepTime),
			ArrTime:        utils.ToTime(fRes.ArrTime),
			Status:         fRes.Status,
		},
		ReservationDate: utils.ToTime(pRes.ReservationDate),
		Status:          pRes.Status,
	}

	return dto, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
