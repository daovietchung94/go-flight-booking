package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"go-training/clients/graphql/customer/generated"
	"go-training/clients/graphql/customer/model"
	"go-training/pb"
	"time"
)

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input model.CreateCustomerRequest) (*model.Customer, error) {
	pReq := &pb.CreateCustomerRequest{
		Name: input.Name,
		DateOfBirth: &pb.Date{
			Year:  int32(input.DateOfBirth.Year()),
			Month: int32(input.DateOfBirth.Month()),
			Day:   int32(input.DateOfBirth.Day()),
		},
		Address:  input.Address,
		Email:    input.Email,
		Password: input.Password,
	}

	pRes, err := r.MyCustomerClient.CreateCustomer(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Customer{
		ID:          pRes.Id,
		Name:        pRes.Name,
		DateOfBirth: time.Date(int(pRes.DateOfBirth.Year), time.Month(pRes.DateOfBirth.Month), int(pRes.DateOfBirth.Day), 0, 0, 0, 0, time.Local),
		Address:     pRes.Address,
		Email:       pRes.Email,
	}

	return dto, nil
}

// GetCustomerDetails is the resolver for the getCustomerDetails field.
func (r *queryResolver) GetCustomerDetails(ctx context.Context, input model.GetCustomerDetailsRequest) (*model.Customer, error) {
	pReq := &pb.GetCustomerDetailsRequest{
		Id: input.ID,
	}
	pRes, err := r.MyCustomerClient.GetCustomerDetails(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Customer{
		ID:          pRes.Id,
		Name:        pRes.Name,
		Address:     pRes.Address,
		DateOfBirth: time.Date(int(pRes.DateOfBirth.Year), time.Month(pRes.DateOfBirth.Month), int(pRes.DateOfBirth.Day), 0, 0, 0, 0, time.Local),
	}

	return dto, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
