package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"go-training/clients/graphql/flight_manager/generated"
	"go-training/clients/graphql/flight_manager/model"
	"go-training/pb"
	"time"
)

// FindFlightByID is the resolver for the findFlightByID field.
func (r *entityResolver) FindFlightByID(ctx context.Context, id string) (*model.Flight, error) {
	pReq := &pb.GetFlightDetailsRequest{
		Id: id,
	}
	c, err := r.MyFlightClient.GetFlightDetails(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Flight{
		ID:             c.Id,
		PlaneNumber:    c.PlaneNumber,
		AvailableSeats: int(c.AvailableSeats),
		FromCity:       c.FromCity,
		ToCity:         c.ToCity,
		DepTime:        time.Date(int(c.DepTime.Year), time.Month(c.DepTime.Month), int(c.DepTime.Day), int(c.DepTime.Hour), int(c.DepTime.Minute), int(c.DepTime.Second), 0, time.Local),
		ArrTime:        time.Date(int(c.ArrTime.Year), time.Month(c.ArrTime.Month), int(c.ArrTime.Day), int(c.ArrTime.Hour), int(c.ArrTime.Minute), int(c.ArrTime.Second), 0, time.Local),
		Status:         c.Status,
	}

	return dto, nil
}

// Entity returns generated.EntityResolver implementation.
func (r *Resolver) Entity() generated.EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
