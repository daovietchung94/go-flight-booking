package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"go-training/clients/graph/generated"
	"go-training/clients/graph/model"
	"go-training/pb"
	"time"
)

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input model.NewCustomer) (*model.Customer, error) {
	pReq := &pb.Customer{
		Name:    input.Name,
		Address: input.Address,
		Email:   input.Email,
		DateOfBirth: &pb.Date{
			Year:  1990,
			Month: 10,
			Day:   10,
		},
		Password: input.Password,
	}

	pRes, err := r.MyCustomerClient.CreateCustomer(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Customer{
		ID:          pRes.Id,
		Name:        pRes.Name,
		Address:     pRes.Address,
		Email:       pRes.Email,
		DateOfBirth: time.Date(int(pRes.DateOfBirth.Year), time.Month(pRes.DateOfBirth.Month), int(pRes.DateOfBirth.Day), 0, 0, 0, 0, time.Local),
	}

	return dto, nil
}

// CreatePlane is the resolver for the createPlane field.
func (r *mutationResolver) CreatePlane(ctx context.Context, input model.CreatePlaneRequest) (*model.Plane, error) {
	pReq := &pb.Plane{
		Number:     input.Number,
		NumOfSeats: int32(input.NumOfSeats),
		Status:     string(input.Status),
	}

	pRes, err := r.MyPlaneClient.CreatePlane(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Plane{
		ID:         pRes.Id,
		Number:     pRes.Number,
		NumOfSeats: int(pRes.NumOfSeats),
		Status:     model.PlaneStatus(pRes.Status),
	}

	return dto, nil
}

// Customer is the resolver for the customer field.
func (r *queryResolver) Customer(ctx context.Context, id string) (*model.Customer, error) {
	pReq := &pb.FindCustomerRequest{
		Id: id,
	}
	pRes, err := r.MyCustomerClient.CustomerDetails(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	dto := &model.Customer{
		ID:          pRes.Id,
		Name:        pRes.Name,
		Address:     pRes.Address,
		DateOfBirth: time.Date(int(pRes.DateOfBirth.Year), time.Month(pRes.DateOfBirth.Month), int(pRes.DateOfBirth.Day), 0, 0, 0, 0, time.Local),
	}

	return dto, nil
}

// GetPlanes is the resolver for the getPlanes field.
func (r *queryResolver) GetPlanes(ctx context.Context, input model.GetPlanesRequest) (*model.GetPlanesResponse, error) {
	pReq := &pb.GetPlanesRequest{
		Page:  int32(input.Page),
		Limit: int32(input.Limit),
		Sort:  input.Sort,
	}

	pRes, err := r.MyPlaneClient.GetPlanes(ctx, pReq)
	if err != nil {
		panic(fmt.Errorf(err.Error()))
	}

	planes := make([]*model.Plane, len(pRes.Rows))
	for i, v := range pRes.Rows {
		planes[i] = &model.Plane{
			ID:         v.Id,
			Number:     v.Number,
			NumOfSeats: int(v.NumOfSeats),
			Status:     model.PlaneStatus(v.Status),
		}
	}

	dto := &model.GetPlanesResponse{
		Page:       int(pRes.GetPage()),
		Limit:      int(pRes.GetLimit()),
		Sort:       pRes.GetSort(),
		TotalRows:  int(pRes.GetTotalRows()),
		TotalPages: int(pRes.GetTotalPages()),
		Rows:       planes,
	}

	return dto, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
